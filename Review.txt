Замечания по ревью

HW 3

- 1 -

*Resume*
~ equals - сгенери стандартный при помощи идеи

*Storage*
~ `Resume r` - давай переменным осмысленные имена, такие сокращения можно использовать внутри циклов или в стримах

*AbstractArrayStorage*
~ поставь полям класса корректные модификаторы доступа
~ update/delete/get  - работает с ошибкой в реализации SortedArrayStorage
~ get -  RESUME_NOT_FOUND вместо -1
~ save - перенеси проверку индекса из наследников в абстрактный класс
~ delete - нет сохранения порядка следования резюме в SortedArrayStorage

*SortedArrayStorage*
~ binarySearch(Object[] a, int fromIndex, int toIndex, Object key) - используй этот метод с такими параметрами, компаратор для резюме уже определен в классе модели
~ Arrays.binarySearch - протестируй и почитай что возвращает этот метод, если объект (резюме) не найдено
~ indexOf - cоедени их вместе в один метод
~ insertResume - проверка if (index == RESUME_NOT_FOUND), что будет если придет индекс с значением например .. 7?

*MainArray*
~ интересная реализация :slightly_smiling_face:, только тестил в ней мало… т.к.SortedArrayStorage почти в каждом методе получает ArrayIndexOutOfBoundsException

~ когда переопределяешь(реализуешь)  методы, не забывай ставить над ними аннотацию @Override, это защитит от ошибок в случае рефакторинга кода

- 2 -
*AbstractArrayStorage*
~ здесь тоже ставь аннотации @Override
~ indexOf - попытка хорошая, но каким будет результат в не сортированном хранилище?
~ посмотри какой еще общий код можно вынести в абстрактный класс из наследников

*SortedArrayStorage*
~ deleteElementByIndex - выходишь за пределы storage
~ index = (-1 * index) - 1; - лучше сделать новую переменную, так будет понятно, где и какое значение используется и вычисляется